{"version":3,"sources":["components/navigation.jsx","components/header.jsx","components/image.jsx","components/gallery.jsx","components/intro.jsx","components/Team.jsx","components/contact.jsx","components/features.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Navigation","props","id","className","type","data-toggle","data-target","href","src","alt","toggle","Header","data","title","paragraph","Image","largeImage","smallImage","data-lightbox-gallery","Gallery","map","d","i","Intro","Team","img","name","job","initialState","email","message","Contact","useState","phone","twitter","target","rel","twitter2","Features","text","App","SmoothScroll","speed","speedAsDuration","landingPageData","setLandingPageData","useEffect","JsonData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f15434fe.chunk.js","sourcesContent":["export const Navigation = (props) => {\n  return (\n    <nav id='menu' className='navbar navbar-default navbar-fixed-top '>\n      <div className='container'>\n        <div className='navbar-header'>\n          <button\n            type='button'\n            className='navbar-toggle collapsed'\n            data-toggle='collapse'\n            data-target='#bs-example-navbar-collapse-1'\n          >\n            {' '}\n            <span className='sr-only'>Toggle navigation</span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n            <span className='icon-bar'></span>{' '}\n          </button>\n         \n          <a className='navbar-brand page-scroll' href='#page-top'>\n            emOG NFT\n          </a>{' '}\n          <img className=\"mainImage\" src=\"/img/icons/MAIN.png\" alt=\"emoji\" />\n        \n        </div>\n\n        <div\n          className='collapse navbar-collapse'\n          id='bs-example-navbar-collapse-1'\n          data-toggle='collapse'\n          toggle=\"collapse\" data-target=\".navbar-collapse\"\n          \n        >\n          <ul className='nav navbar-nav navbar-right' toggle='collapse'>\n            {/* <li>\n              <a href='#' >\n                Opensea\n              </a>\n            </li> */}\n            \n            <li>\n              <a href='#info' className='page-scroll'>\n                About\n              </a>\n            </li>\n            <li>\n              <a href='#team' className='page-scroll'>\n                Team\n              </a>\n            </li>           \n            <li>\n              <a href='#portfolio' className='page-scroll'>\n                Gallery\n              </a>\n            </li>\n            {/* <li>\n              <a href='#about' className='page-scroll'>\n                Shop\n              </a>\n            </li> */}\n            <li>\n              <a href='#contact' className='page-scroll'>\n                Contact\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  )\n}\n","export const Header = (props) => {\n  return (\n    <header id='header'>\n      <div className='intro'>\n        <div className='overlay'>\n          <div className='container'>\n            <div className='row'>\n              <div className='col-md-8 col-md-offset-2 intro-text'>\n                <h1>\n                  {props.data ? props.data.title : 'Loading'}\n                  <span></span>\n                </h1>\n                <p>{props.data ? props.data.paragraph : 'Loading'}</p>\n                {/* <a\n                  href='#features'\n                  className='btn btn-custom btn-lg page-scroll'\n                >\n                  Mint\n                </a>{' '} */}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n","export const Image = ({ title, largeImage, smallImage }) => {\n  return (\n    <div className='portfolio-item'>\n      <div className='hover-bg'>\n        {' '}\n        <a\n          href={largeImage}\n          title={title}\n          data-lightbox-gallery='gallery1'\n        >\n          <div className='hover-text'>\n            <h4>{title}</h4>\n          </div>\n          <img\n            src={smallImage}\n            className='img-responsive'\n            alt={title}\n          />{' '}\n        </a>{' '}\n      </div>\n    </div>\n  )\n}","import { Image } from \"./image\";\n\nexport const Gallery = (props) => {\n  return (\n    <div id='portfolio' className='text-center'>\n      <div className='container'>\n        <div className='section-title'>\n          <h2>Gallery</h2>\n          <p>\n            With millions of combinations, your NFT will always be unique.\n          </p>\n        </div>\n        <div className='row'>\n          <div className='portfolio-items'>\n            {props.data\n              ? props.data.map((d, i) => (\n                <div key={`${d.title}-${i}`} className='col-sm-6 col-md-4 col-lg-4'>\n                  \n                  <Image title={d.title} largeImage={d.largeImage} smallImage={d.smallImage} />\n                </div>\n              ))\n              : 'Loading...'}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","export const Intro = (props) => {\n    \n    return (\n    \n      <div id=\"info\">\n        <div className=\"container introCont\">\n          <div className=\"row\">\n            {/* <div className=\"col-xs-12 col-md-6\">\n              {\" \"}\n              <img src=\"img/about.png\" className=\"img-responsive\" alt=\"\" />{\" \"}\n            </div> */}\n            <div className=\"col-xs-12 col-md-12 col-lg-12\">\n              <div className=\"section-title text-center\">\n                <h2>What are emOG's?</h2>\n                <p>{props.data ? props.data.paragraph : \"loading...\"}</p>\n                {/* Mission statememnt below */}\n                {/* <h2>Mission</h2>\n                <p>{props.data ? props.data.secondP : \"loading...\"}</p> */}\n                {/* <div className=\"list-style\">\n                  <div className=\"col-lg-6 col-sm-6 col-xs-12\">\n                    <ul>\n                      {props.data\n                        ? props.data.Why.map((d, i) => (\n                            <li key={`${d}-${i}`}>{d}</li>\n                          ))\n                        : \"loading\"}\n                    </ul>\n                  </div>\n                  <div className=\"col-lg-6 col-sm-6 col-xs-12\">\n                    <ul>\n                      {props.data\n                        ? props.data.Why2.map((d, i) => (\n                            <li key={`${d}-${i}`}> {d}</li>\n                          ))\n                        : \"loading\"}\n                    </ul>\n                  </div>\n                </div> */}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  ","export const Team = (props) => {\n  return (\n    <div id='team' className='text-center'>\n      <div className='container'>\n        <div className='col-md-8 col-md-offset-2 section-title'>\n          <h2>Team & Story</h2>\n          <p>\n          I’m Vincent; I created emOG NFT with my creative partner... my 8 year old daughter. While\nshowing her the Crypto Punks collection, my daughter asked, “Can we make a\ncollection of Pixel Art Emojis?” Immediately, the emOG idea was created. After\nhours of laughing and drawing, we were able to put together a small collection of\nlayers and then generate random emoji images. \n          </p>\n        </div>\n        <div id='row'>\n          {props.data\n            ? props.data.map((d, i) => (\n                <div key={`${d.name}-${i}`} className='col-sm-6 team'>\n                  <div className='thumbnail'>\n                    {' '}\n                    <img src={d.img} alt='...' className='team-img' />\n                    <div className='caption'>\n                      <h4>{d.name}</h4>\n                      <p>{d.job}</p>\n                    </div>\n                  </div>\n                </div>\n              ))\n            : 'loading'}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState } from 'react';\nimport emailjs from 'emailjs-com';\n\nconst initialState = {\n  name: '',\n  email: '',\n  message: '',\n}\nexport const Contact = (props) => {\n  const [{ name, email, message }, setState] = useState(initialState)\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setState((prevState) => ({ ...prevState, [name]: value }))\n  }\n  const clearState = () => setState({ ...initialState })\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    console.log(name, email, message)\n    emailjs\n      .sendForm(\n        'YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', e.target, 'YOUR_USER_ID'\n      )\n      .then(\n        (result) => {\n          console.log(result.text)\n          clearState()\n        },\n        (error) => {\n          console.log(error.text)\n        }\n      )\n  }\n  return (\n    <div>\n      <div id='contact'>\n        <div className='container'>\n          <div className='col-md-8'>\n            <div className='row'>\n              <div className='section-title'>\n                <p>Special Thanks 🙏:</p>\n                <p>Gary V. - You are a role model for us at emOG NFT.</p>\n                <p>Thanks for all the insight and knowledge you put out.</p>\n                <p>Hashlips - Thanks for support and great community you created. </p>\n                <p>Everyone on NFT Twitter sending out posative vibes.</p>\n                <p>Ape Gang NFT</p>\n              </div>\n              \n            </div>\n          </div>\n          <div className='col-md-3 col-md-offset-1 contact-info'>\n            <div className='contact-item'>\n              {/* <h3>Contact Info</h3> */}\n              <p>\n                {' '}\n                {props.data ? props.data.phone : 'loading'}\n              </p>\n            </div>\n            <div className='contact-item'>\n              <p>\n                <span>\n                  <i className='fa fa-envelope-o'></i> Email\n                </span>{' '}\n                {props.data ? props.data.email : 'loading'}\n              </p>\n            </div>\n          </div>\n          <div className='col-md-12'>\n            <div className='row'>\n              <div className='social'>\n                <ul>\n                  <li>\n                    <a href={props.data ? props.data.twitter : '/'} target=\"_blank\" rel=\"noreferrer\">\n                    <i className=\"fab fa-twitter\"></i>\n                      <img className=\"icons\" src=\"/img/icons/twitter.png\" alt=\"React Logo\" />\n                       \n                    </a>\n                  </li>\n                  <li>\n                    <a href={props.data ? props.data.twitter2 : '/'} target=\"_blank\" rel=\"noreferrer\">\n                    <i className=\"fab fa-twitter\"></i>\n                      <img className=\"icons\" src=\"/img/icons/twitter.png\" alt=\"React Logo\" />\n                       \n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    </div>\n  )\n}\n","export const Features = (props) => {\n  return (\n    <div id='features' className='text-center'>\n      <div className='container'>\n        <div className='col-md-10 col-md-offset-1 section-title'>\n          <h2>How are emOG's created?</h2>\n          <p>There are 6 layers to each emOG.  Each layer has multiple traits options but each emOG will randomly receive 1 trait per layer.  There are over 100 different traits which will make each NFT unique to the collection.</p>\n        </div>\n        <div className='row'>\n          {props.data\n            ? props.data.map((d, i) => (\n                <div key={`${d.title}-${i}`} className='col-xs-6 col-md-4 col-lg-2'>\n                  {' '}\n\n                  <img src={d.img} alt={d.title} className='layerImg' />\n                  <h3>{d.title}</h3>\n                  <p>{d.text}</p>\n                  <br/>\n                </div>\n              ))\n            : 'Loading...'}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect } from \"react\";\nimport { Navigation } from \"./components/navigation\";\nimport { Header } from \"./components/header\";\n// import { Features } from \"./components/features\";\n// import { About } from \"./components/about\";\nimport { Services } from \"./components/services\";\nimport { Gallery } from \"./components/gallery\";\nimport { Intro } from \"./components/intro\";\nimport { Team } from \"./components/Team\";\nimport { Contact } from \"./components/contact\";\nimport { Features } from \"./components/features\";\nimport { Testimonials } from \"./components/testimonials\"\nimport JsonData from \"./data/data.json\";\nimport SmoothScroll from \"smooth-scroll\";\nimport \"./App.css\";\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n});\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({});\n  useEffect(() => {\n    setLandingPageData(JsonData);\n  }, []);\n\n  return (\n    <div>\n      <Navigation />\n      <Header data={landingPageData.Header} />\n      <Intro data={landingPageData.Intro} />  \n         \n      <Features data={landingPageData.Features} />\n       \n      \n      {/* <Testimonials data={landingPageData.Testimonials} /> */}\n      <Team data={landingPageData.Team} />\n      {/* <Services data={landingPageData.Services} /> */}\n     \n      <Gallery data={landingPageData.Gallery}/>\n      {/* shop */}\n      {/* <About data={landingPageData.About} /> */}\n      <Contact data={landingPageData.Contact} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}